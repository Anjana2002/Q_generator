1. What are the two categories of C functions?
2. What are the advantages of using functions?
3. What is the main program function B Function A Function C B1 B2 Figure 1.1: Top-down modular programming using functions8 Chapter 1 Functions 2?
4. What is the name of the program that can be used to create a function?
5. What is the name of the function that can be called more than once?
6. Function definition 2. Function call 3. Function Declaration (Function Prototype) 1.2.1 Definition of Functions General format of function definition is given below. Function definition (function implementation ) shall include the following elements: 1. Function header 2. Function definition 2. Function call 3. Function declaration (Function Prototype) 1.2.1 Definition of Functions
7. Function body Function Header Function header contains three parts: •Function type (Return type): The function type specifies the type of value the function is expected to return to calling function.
8. What is the name of the variable that will receive the data sent by the calling function?
9. Function Body A function body contains three parts 1. Local declarations that specify the variables needed by the function.
10. Function statements that perform the task of the function are called.
11. Functions return ( expression ); Listing 1.4: Syntax of return statement When a return is encountered, the control is immediately passed back to the calling function.
12. void main ( float l,b, area ; area = findArea (10.2 ,20.5) ; /* Function Call */ printf (" Area = %f",area );  Listing 1.6: Example for function call When the function call occurs, the control is transferred to the function findArea() .
13. Function Declaration (Function Prototype) Like variables, all functions in C program must be declared, before they are invoked.
14. Function Header section General format of a function declaration is: function_type function_name ( paramter_lst ); Listing 1.7: General format of function declaration An example for function declaration is given below: float findArea ( float l, float b); Listing 1.8: Example for function declaration
15. What is the global prototype called?
16. What is the name of the category of functions 11 1.3 Category of Functions?
17. Functions 1.3.2 Arguments but No Return Value Calling Function functionA()  ... functionB(a,b); ... ... ... ... Call with parameters returns v Figure 1.5: Arguments with return value 1.3.3 Nesting of Functions 13
18. What is another function called?
19. PI 3.14: Example for nesting of functions14 Chapter 1: Example for nesting of functions14 Chapter 1: Example for nesting of functions14 Chapter 1.12: Example for nesting of functions14 Chapter 1.12: Example for nesting of functions14 Chapter 1.12: Example for nesting of functions14 Chapter 1.12: Example for nesting of functions14 Chapter 1.12: Example for nesting of functions14 Chapter 1.12: Example for nesting of functions14 Chapter 1.12: Example for nesting of functions14 Chapter 1.12:
20. Functions 1.5 Recursion Recursion is a process by which a function calls itself repeatedly until some specified condition has been satisfied.
21. The problem statement must include a stopping condition For example to find the factorial of a number, the problem statement must include a stopping condition
22.  Listing 1.13: Factorial of a number using recursion1.6 Storage Classes in C 15 1.6 Storage Classes in C In C, all variables have a data type and also a storage class 
23. What is the name of the function in which automatic variables are declared inside a function in which they are to be utilized?
24. What is an automatic variable called?
25. External variables •External variables are declared outside all functions •External variables are declared outside all functions •External variables are declared outside all functions •External variables are declared outside all functions •External variables are declared outside all functions •External variables are declared outside all functions •External variables are declared outside all functions •External variables are declared outside all functions •
26. External variables declaration16 Chapter 1 Listing 1.15: External variables declaration16 Chapter 1 Listing 1.15: External variables declaration16 Chapter 1 Listing 1.15: External variables declaration16
27. What is the name of the variable that is declared in the function where it is declared?
28. External Declaration If an external variable is declared after a function, then the variable must be declared inside the function using the storage class specifier extern .
29. Static Variables • A static variable can be declared static by using the keyword static •A static variable may be either an internal or external type depending upon the place of declaration •Internal static variable is declared inside a function.
30. Internal static variables are similar to automatic variables, except that they remain in existence throughout the remainder of the1.6 Storage Classes in C 17 program.
31. Register Variables •Since a register access is much faster than a memory access, keeping the frequently accessed variables in the register will lead to faster execution of the programs •Register variable will have garbage initial value.
32. Register variables can be declared as follows register int i; Listing 1.20: Declaration of a register variable • Register variables are local to the function in which they are declared 1.6.5 Summarizing Storage Classes Automatic Keyword : auto Initial value : Garbage Storage location : RAM Scope : Local to the block where the variable is declared Lifetime : As long as the control is within the block where the variable is declared18 Chapter 1
33. As long as the program is under execution Register Keyword : register Initial value : Garbage Storage location : Register Scope : Local to the block where the variable is defined Lifetime : As long as the control is within the block where the variable is declared Lifetime : As long as the control is within the block where the variable is declared Lifetime : As long as the control is within the block where the variable is declared Lifetime : As long as the control is within the block where the variable is declared Lifetime 
