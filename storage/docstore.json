{"docstore/metadata": {"38e35499-2811-4d1e-8add-e2ea42c24f17": {"doc_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"}, "32c56f14-8201-46d8-810f-6934866bc43e": {"doc_hash": "1ab9ca2353f84267afab356e0df23ca1a8e31c0d80a1b4b24b9c3c41a5d542bf"}, "a6bdff5a-70fa-453d-bd32-566948de0e11": {"doc_hash": "81ddb9cebaa3013a59685be519c1bb98ca51f274a44f25a52372faae6bb4b299"}, "aedab563-e618-443b-800d-e17e69a0d7b6": {"doc_hash": "dc446b5d3b00492366282b7cf66e6cae825924a479e940c1fe20787e03834704"}, "0d9fa8fa-b7e9-4f2d-b527-d0048b5aec10": {"doc_hash": "4976ec3497c5676e9f17280b4a3e5a773df7e8461d36b5ce2624a1b5cdbcc8a5"}, "531945be-3a09-4f73-ab59-4db85e7ed95d": {"doc_hash": "86fb408d6d35cf843d37ee8922b1b1f572e92213a40601a789ed962ca28234da"}, "ac431b3e-ff15-4886-8702-70128090937d": {"doc_hash": "49bd5d9e85868dff4e7e5a30bdd9207c5406d9025bd12241876817d57d4a1dd5"}, "d638c597-0a06-44f4-9e71-d9e74acf2514": {"doc_hash": "8275877c07bca83bbd66a380136e55fc7d78b8469a2beeeb0f5637585319ce58"}, "9ce35a2d-af23-4af6-9ab2-f019cdc5a69d": {"doc_hash": "2f05f9a81824936decd37182db7c4bcd512404ffee19f7cb72e90bc8e69fcba2"}, "44467bdd-07ee-454f-b5f5-c6b0b484076f": {"doc_hash": "6f033aa9f21564fb4db7af76c2ee44542a9fb6c67a3220f0b43693d461a13db6"}, "3f4c8fb9-5b7f-4c81-aa50-5297e53b3284": {"doc_hash": "36a91e64358c070a059592380431d03c21a26f9196b338917080b7b20750328f"}, "f7154d26-7fc4-47f5-afe5-3c8a33890c1b": {"doc_hash": "c50348ff2a63ba7ff723b9b0157a79fc283803813fd0e18b37e4d62f1bb017c0"}, "754952d1-02c3-4c91-a8cf-d266a07829f4": {"doc_hash": "3fad0cc30195b823b880fcc60605f9dd1c1f8d40dd33966fdd7b271f0314a298"}, "8f729142-e26b-4362-bf57-da7bdd1a1341": {"doc_hash": "43cbc5e6317b6201ac184115f3883e484ac71de2a1f2eb895a4aa8903d560e8a", "ref_doc_id": "38e35499-2811-4d1e-8add-e2ea42c24f17"}, "b835bc9f-02cf-45c9-8567-1ada9c53715a": {"doc_hash": "18c07873c09075b5322ef3d59b9f204240ad50e8119a1a5d0566032c6fab650c", "ref_doc_id": "32c56f14-8201-46d8-810f-6934866bc43e"}, "fe8918c3-0f94-4577-8d95-8bc1e52ebacc": {"doc_hash": "d9e472e6fcd5cbbfc4a84bc9395293c1470edb36daa0f1e84375fac8e4ba506e", "ref_doc_id": "a6bdff5a-70fa-453d-bd32-566948de0e11"}, "e5334359-e8b7-46d3-9ca5-048205aa4500": {"doc_hash": "db42fe01ae3bc5e4a47dcb77e43fed6cb6525e543253316aafdae38f0dd90370", "ref_doc_id": "aedab563-e618-443b-800d-e17e69a0d7b6"}, "ecddf02a-6fbf-4bca-a2f5-8909a28c805c": {"doc_hash": "432fd2038bbd0e5797d31f7496d3c202eab9bf9c895df373f9eccba2986359a5", "ref_doc_id": "0d9fa8fa-b7e9-4f2d-b527-d0048b5aec10"}, "f2c2065f-f2af-4a65-8279-92f878c07053": {"doc_hash": "20f182da270e830776f55b0e427d47db9298bf6cb219dee4b2300e495a600fdd", "ref_doc_id": "531945be-3a09-4f73-ab59-4db85e7ed95d"}, "121815e2-29a0-4fa5-8774-f0bcdf728828": {"doc_hash": "a4948c1b51c3e378a246bf4aa4e7c44326e40258528deaa939b1430807ad04ea", "ref_doc_id": "ac431b3e-ff15-4886-8702-70128090937d"}, "a8c51df3-2a09-4f8f-bf9d-47ac897e24f9": {"doc_hash": "0a17c56e6351d2ae1f034f471d280afae8775d4c6acc7f2e20daebb1aeff7b7d", "ref_doc_id": "d638c597-0a06-44f4-9e71-d9e74acf2514"}, "cdc093ca-bc99-4c43-9746-56bad7a53197": {"doc_hash": "6994152da6911f2dfa92d99dfd8e913dab6b94f7691a7d088749cd9d5de4230a", "ref_doc_id": "9ce35a2d-af23-4af6-9ab2-f019cdc5a69d"}, "cddf83ed-4b8d-4d4c-b4ab-9313c8d51d38": {"doc_hash": "8911b7d0e77d0b3fb79de85a23c79ea2042885d2eb470944c00b2f4d9f91da7d", "ref_doc_id": "44467bdd-07ee-454f-b5f5-c6b0b484076f"}, "246b9f28-7bfc-467e-a050-e3ef9cd36f7c": {"doc_hash": "71b7cfcc52817e5a73a30587c246f4e0237b1ffa944f07454356c886a3c1d2ba", "ref_doc_id": "3f4c8fb9-5b7f-4c81-aa50-5297e53b3284"}, "df9fb545-afb6-411e-8ea5-be4fbf5db7fb": {"doc_hash": "a170d8e2b67e2e55a2867a5c3d0201bb095d62770ea6e2dcfbe7aa114fcc2474", "ref_doc_id": "f7154d26-7fc4-47f5-afe5-3c8a33890c1b"}, "17df726a-0843-4e78-a532-00b7b5871793": {"doc_hash": "c8220781e88d5b4b8426ccaf0d47859520561228a5823369f0da898dd677f696", "ref_doc_id": "754952d1-02c3-4c91-a8cf-d266a07829f4"}}, "docstore/data": {"8f729142-e26b-4362-bf57-da7bdd1a1341": {"__data__": {"id_": "8f729142-e26b-4362-bf57-da7bdd1a1341", "embedding": null, "metadata": {"page_label": "1", "file_name": "note.pdf", "file_path": "/home/anjana/Project/generator/question_papers/note.pdf", "file_type": "application/pdf", "file_size": 223568, "creation_date": "2025-02-18", "last_modified_date": "2025-02-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "38e35499-2811-4d1e-8add-e2ea42c24f17", "node_type": "4", "metadata": {"page_label": "1", "file_name": "note.pdf", "file_path": "/home/anjana/Project/generator/question_papers/note.pdf", "file_type": "application/pdf", "file_size": 223568, "creation_date": "2025-02-18", "last_modified_date": "2025-02-17"}, "hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b835bc9f-02cf-45c9-8567-1ada9c53715a": {"__data__": {"id_": "b835bc9f-02cf-45c9-8567-1ada9c53715a", "embedding": null, "metadata": {"page_label": "2", "file_name": "note.pdf", "file_path": "/home/anjana/Project/generator/question_papers/note.pdf", "file_type": "application/pdf", "file_size": 223568, "creation_date": "2025-02-18", "last_modified_date": "2025-02-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "32c56f14-8201-46d8-810f-6934866bc43e", "node_type": "4", "metadata": {"page_label": "2", "file_name": "note.pdf", "file_path": "/home/anjana/Project/generator/question_papers/note.pdf", "file_type": "application/pdf", "file_size": 223568, "creation_date": "2025-02-18", "last_modified_date": "2025-02-17"}, "hash": "1ab9ca2353f84267afab356e0df23ca1a8e31c0d80a1b4b24b9c3c41a5d542bf", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "1. Functions\n1.1 Introduction to Functions\nEvery C program must have a main function to indicate where the program has to begin its\nexecution. If a program is written only using a single main function, the program becomes too\nlarge and complex and as a result, the task of debugging, testing and maintaining becomes dif\ufb01cult.\nC functions can be classi\ufb01ed into two categories:\n\u2022 Library Functions: Not required to be writtenby the programmer. e.g. printf(), scanf(),\nstrlen() etc.\n\u2022 User-de\ufb01ned functions: Has to be developed by the user at the time of writing a program.\nIf a program is divided into functional parts, then each part may be coded independently and later\ncombined into a single unit. These independently coded programs are called sub programs that are\nmuch easier to understand, debug and test. In C, such subprograms are referred to as functions.\nThe advantages of using functions are:\n1. Uses top down modular programming approach. The high level logic of the overall\nproblem is solved \ufb01rst while the details of each lower functions are taken care later.\nMain Program\nFunction BFunction A Function C\nB1 B2\nFigure 1.1: Top-down modular programming using functions", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1179, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fe8918c3-0f94-4577-8d95-8bc1e52ebacc": {"__data__": {"id_": "fe8918c3-0f94-4577-8d95-8bc1e52ebacc", "embedding": null, "metadata": {"page_label": "3", "file_name": "note.pdf", "file_path": "/home/anjana/Project/generator/question_papers/note.pdf", "file_type": "application/pdf", "file_size": 223568, "creation_date": "2025-02-18", "last_modified_date": "2025-02-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a6bdff5a-70fa-453d-bd32-566948de0e11", "node_type": "4", "metadata": {"page_label": "3", "file_name": "note.pdf", "file_path": "/home/anjana/Project/generator/question_papers/note.pdf", "file_type": "application/pdf", "file_size": 223568, "creation_date": "2025-02-18", "last_modified_date": "2025-02-17"}, "hash": "81ddb9cebaa3013a59685be519c1bb98ca51f274a44f25a52372faae6bb4b299", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "8 Chapter 1. Functions\n2. The length of the program can be reduced by using functions at appropriate places.\n3. It is easier to locate and isolate faulty functions.\n4. A function once created, can be used by many other programs.\nA function is a self contained block of code that performs a particular task. Once a function has\nbeen designed and packed, it can be treated as a unit that takes some data from the main program\nand returns a value. The inner details of the operations are invisible to the rest of the program. All\nthat the program knows about a function is what goes in and what comes out. Every C program can\nbe designed using a collection of functions.\nmain()\n{\n\u2014\u2014-\n\u2014\u2014-\nFunction1();\n\u2014\u2014-\n\u2014\u2014-\nFunction2();\n\u2014\u2014-\n\u2014\u2014-\nFunction1();\n}\nFunction1()\n{\n\u2014\u2014-\n\u2014\u2014-\n}\nFunction2()\n{\n\u2014\u2014-\nFunction3();\n\u2014\u2014-\n}\nFunction3()\n{\n\u2014\u2014-\n\u2014\u2014-\n}\nreturn\ncall\nreturn\nreturn\ncall\ncall\nFigure 1.2: Program with multiple user de\ufb01ned functions\n\u2022 Any function call any other function.\n\u2022 A called function can also call another function.\n\u2022 A function can be called more than once.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1053, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e5334359-e8b7-46d3-9ca5-048205aa4500": {"__data__": {"id_": "e5334359-e8b7-46d3-9ca5-048205aa4500", "embedding": null, "metadata": {"page_label": "4", "file_name": "note.pdf", "file_path": "/home/anjana/Project/generator/question_papers/note.pdf", "file_type": "application/pdf", "file_size": 223568, "creation_date": "2025-02-18", "last_modified_date": "2025-02-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "aedab563-e618-443b-800d-e17e69a0d7b6", "node_type": "4", "metadata": {"page_label": "4", "file_name": "note.pdf", "file_path": "/home/anjana/Project/generator/question_papers/note.pdf", "file_type": "application/pdf", "file_size": 223568, "creation_date": "2025-02-18", "last_modified_date": "2025-02-17"}, "hash": "dc446b5d3b00492366282b7cf66e6cae825924a479e940c1fe20787e03834704", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "1.2 The Form of C Functions 9\n1.2 The Form of C Functions\nTo make user-de\ufb01ned functions, the following parts are to be established.\n1. Function De\ufb01nition\n2. Function call\n3. Function Declaration (Function Prototype)\n1.2.1 De\ufb01nition of Functions\nGeneral format of function de\ufb01nition is given below.\nfunction_type function_name ( paramater list )\n{\nlocal variable declaration ;\nexecutable statement1 ;\nexecutable statement2 ;\n....\n....\nreturn statement ;\n}\nListing 1.1: General format of a function de\ufb01nition\nA function de\ufb01nition (function implementation) shall include the following elements:\n1. Function header\n2. Function body\nFunction Header\nFunction header consists of three parts:\n\u2022 Function type (Return type):\nThe function type speci\ufb01es the type of value the function is expected to return to calling\nfunction. If return type is not speci\ufb01ed, C will assume that it is an integer type. If the function\ndoes not return anything, then return type should be speci\ufb01ed as void.\n\u2022 Function name:\nFunction name is any valid C identi\ufb01er and therefore must follow the same rules for variable\nnames.\n\u2022 Formal parameter list:\nFormal parameter list declares the variable that will receive the data sent by the calling\nfunction. The parameter list contains the declaration of variables separated by commas and\nsurrounded by parentheses.\nfloat volume ( int r, int h)\nListing 1.2: Formal parameter list\nIf the function does not receive any values from the calling function, then an empty pair of\nparentheses has to be put.\nfloat welcome ()\nListing 1.3: Example for function without parameters\nFunction Body\nA function body contains three parts\n1. Local declarations that specify the variables needed by the function.\n2. Function statements that perform the task of the function.\n3. A return statement that returns the value evaluated by the function. The return statement\ncan be omitted if the function does not return any value. The return statement can take the\nfollowing form:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1969, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ecddf02a-6fbf-4bca-a2f5-8909a28c805c": {"__data__": {"id_": "ecddf02a-6fbf-4bca-a2f5-8909a28c805c", "embedding": null, "metadata": {"page_label": "5", "file_name": "note.pdf", "file_path": "/home/anjana/Project/generator/question_papers/note.pdf", "file_type": "application/pdf", "file_size": 223568, "creation_date": "2025-02-18", "last_modified_date": "2025-02-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0d9fa8fa-b7e9-4f2d-b527-d0048b5aec10", "node_type": "4", "metadata": {"page_label": "5", "file_name": "note.pdf", "file_path": "/home/anjana/Project/generator/question_papers/note.pdf", "file_type": "application/pdf", "file_size": 223568, "creation_date": "2025-02-18", "last_modified_date": "2025-02-17"}, "hash": "4976ec3497c5676e9f17280b4a3e5a773df7e8461d36b5ce2624a1b5cdbcc8a5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "10 Chapter 1. Functions\nreturn ( expression );\nListing 1.4: Syntax of return statement\nWhen a return is encountered, the control is immediately passed back to the calling function.\nAn example for a complete function de\ufb01nition is given below\nfloat findArea ( float l, float b)\n{\nfloat area ;\narea = l * b;\nreturn ( area );\n}\nListing 1.5: Example for function de\ufb01nition\n1.2.2 Function Call\nA function can be called by using the function name followed by a list of actual parameters (or\narguments), if any, enclosed in parentheses. For example:\nvoid main ()\n{\nfloat l,b, area ;\narea = findArea (10.2 ,20.5) ; /* Function Call */\nprintf (\" Area = %f\",area );\n}\nListing 1.6: Example for function call\nWhen the function call occurs, the control is transferred to the functionfindArea(). The function\nis then executed and a value is returned when a return statement is encountered. This value is\nassigned to the variable area.\n1.2.3 Function Declaration (Function Prototype)\nLike variables, all functions in C program must be declared, before they are invoked. A function\ndeclaration consists of 4 parts.\n1. Function Type\n2. Function Name\n3. Parameter List\n4. Terminating semicolon\nNote: Refer the Function Header section\nGeneral format of a function declaration is:\nfunction_type function_name ( paramter_lst );\nListing 1.7: General format of function declaration\nAn example for function declaration is given below:\nfloat findArea ( float l, float b);\nListing 1.8: Example for function declaration\nA prototype declaration can be placed in two places in a program.\n1. Above all the functions including the main() function.\nIn this case, the prototype is referred to as global prototype. Such declarations are available\nfor all the functions in the program.\n2. Inside a function de\ufb01nition\nIn this case, the prototype is called local prototype. Such declarations are only available for\nthat function.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1891, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f2c2065f-f2af-4a65-8279-92f878c07053": {"__data__": {"id_": "f2c2065f-f2af-4a65-8279-92f878c07053", "embedding": null, "metadata": {"page_label": "6", "file_name": "note.pdf", "file_path": "/home/anjana/Project/generator/question_papers/note.pdf", "file_type": "application/pdf", "file_size": 223568, "creation_date": "2025-02-18", "last_modified_date": "2025-02-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "531945be-3a09-4f73-ab59-4db85e7ed95d", "node_type": "4", "metadata": {"page_label": "6", "file_name": "note.pdf", "file_path": "/home/anjana/Project/generator/question_papers/note.pdf", "file_type": "application/pdf", "file_size": 223568, "creation_date": "2025-02-18", "last_modified_date": "2025-02-17"}, "hash": "86fb408d6d35cf843d37ee8922b1b1f572e92213a40601a789ed962ca28234da", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "1.3 Category of Functions 11\n1.3 Category of Functions\nDepending on whether a function takes up arguments and whether a function returns a value,\nfunctions can be classi\ufb01ed into different categories\n1.3.1 No Arguments and No Return Value\nCalling Function\nfunctionA()\n{\n...\nfunctionB();\n...\n}\nCalled Function\nfunctionB()\n{\n...\n...\n...\n}\nCall\nNo \nparameters\nNo return values\nFigure 1.3: No arguments and no return values\nIn this case,\n\u2022 The called function does not receive any value from the calling function.\n\u2022 The called function does not return any value to the calling function.\n# include < stdio .h>\nvoid findAreaPerimeter ();\nint main ()\n{\nprintf (\" Area and Perimeter of Rectangle \\n\");\n/* calling function without passing arguments */\nfindAreaPerimeter ();\n}\nvoid findAreaPerimeter ()\n{\nfloat l,b, area ;\nprintf (\" Enter the length and breadth : \");\nscanf (\"%f%f\" ,&l ,&b);\narea =l*b;\nprintf (\" Area = %f\\n\",area );\n}\nListing 1.9: Example for function with no arguments and no return value", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 996, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "121815e2-29a0-4fa5-8774-f0bcdf728828": {"__data__": {"id_": "121815e2-29a0-4fa5-8774-f0bcdf728828", "embedding": null, "metadata": {"page_label": "7", "file_name": "note.pdf", "file_path": "/home/anjana/Project/generator/question_papers/note.pdf", "file_type": "application/pdf", "file_size": 223568, "creation_date": "2025-02-18", "last_modified_date": "2025-02-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ac431b3e-ff15-4886-8702-70128090937d", "node_type": "4", "metadata": {"page_label": "7", "file_name": "note.pdf", "file_path": "/home/anjana/Project/generator/question_papers/note.pdf", "file_type": "application/pdf", "file_size": 223568, "creation_date": "2025-02-18", "last_modified_date": "2025-02-17"}, "hash": "49bd5d9e85868dff4e7e5a30bdd9207c5406d9025bd12241876817d57d4a1dd5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "12 Chapter 1. Functions\n1.3.2 Arguments but No Return Value\nCalling Function\nfunctionA()\n{\n...\nfunctionB(a,b);\n...\n}\nCalled Function\nfunctionB(type a, type b)\n{\n...\n...\n...\n}\nCall\nwith \nparameters\nNo return values\nFigure 1.4: Arguments but no return value\nIn this case,\n\u2022 The calling function passes one or more arguments to the called function.\n\u2022 The called function does not return any value to the calling function.\n# include < stdio .h>\nvoid findAreaPerimeter ( float , float );\nint main ()\n{\nfloat l,b;\nprintf (\" Enter the length and breadth : \");\nscanf (\"%f%f\" ,&l ,&b);\n/* calling function by passing parameters */\nfindAreaPerimeter (l,b);\n}\nvoid findAreaPerimeter ( float l, float b)\n{\nfloat area ;\narea =l*b;\nprintf (\" Area = %f\\n\",area );\n}\nListing 1.10: Example for function with arguments but no return value\n1.3.3 Arguments with Return Value\nCalling Function\nfunctionA()\n{\n...\nfunctionB(a,b);\n...\n}\nCalled Function\nfunctionB(type a, type b)\n{\n...\n...\nreturn(v);\n}\nCall\nwith \nparameters\nreturns v\nFigure 1.5: Arguments with return value", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1048, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a8c51df3-2a09-4f8f-bf9d-47ac897e24f9": {"__data__": {"id_": "a8c51df3-2a09-4f8f-bf9d-47ac897e24f9", "embedding": null, "metadata": {"page_label": "8", "file_name": "note.pdf", "file_path": "/home/anjana/Project/generator/question_papers/note.pdf", "file_type": "application/pdf", "file_size": 223568, "creation_date": "2025-02-18", "last_modified_date": "2025-02-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d638c597-0a06-44f4-9e71-d9e74acf2514", "node_type": "4", "metadata": {"page_label": "8", "file_name": "note.pdf", "file_path": "/home/anjana/Project/generator/question_papers/note.pdf", "file_type": "application/pdf", "file_size": 223568, "creation_date": "2025-02-18", "last_modified_date": "2025-02-17"}, "hash": "8275877c07bca83bbd66a380136e55fc7d78b8469a2beeeb0f5637585319ce58", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "1.4 Nesting of Functions 13\nIn this case,\n\u2022 The calling function passes one or more arguments to the called function.\n\u2022 The called function returns a value to the calling function.\n# include < stdio .h>\nfloat findAreaPerimeter ( float , float );\nint main ()\n{\nfloat l,b, area ;\nprintf (\" Enter the length and breadth : \");\nscanf (\"%f%f\" ,&l ,&b);\n/* calling function by passing parameters */\narea = findAreaPerimeter (l,b);\nprintf (\" Area =%f\\n\",area );\n}\nfloat findAreaPerimeter ( float l, float b)\n{\nfloat area ;\narea =l*b;\nreturn ( area );\n}\nListing 1.11: Example for function with arguments and a return value\n1.4 Nesting of Functions\nIn C, function calls can be nested. i.e. a function can call another function, and the called function\ncan call another function and so on. An example is given below.\n# include < stdio .h>\n# define PI 3.14\nfloat findCylinderVolume ( float , float );\nfloat findBaseArea ( float );\nint main ()\n{\nfloat r,h, volume ;\nprintf (\" Enter the radius and height of the cylinder : \");\nscanf (\"%f%f\" ,&r ,&h);\n/* calling function by passing parameters */\nvolume = findCylinderVolume (r,h);\nprintf (\" Volume =%f\\n\", volume );\n}\nfloat findCylinderVolume ( float r, float h)\n{\nfloat volume , area ;\n/* calling another function */\narea = findBaseArea (r);\nvolume = area *h;\nreturn ( volume );\n}\nfloat findBaseArea ( float r)\n{\nfloat area ;\narea =PI*r*r;\nreturn ( area );\n}\nListing 1.12: Example for nesting of functions", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1442, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "cdc093ca-bc99-4c43-9746-56bad7a53197": {"__data__": {"id_": "cdc093ca-bc99-4c43-9746-56bad7a53197", "embedding": null, "metadata": {"page_label": "9", "file_name": "note.pdf", "file_path": "/home/anjana/Project/generator/question_papers/note.pdf", "file_type": "application/pdf", "file_size": 223568, "creation_date": "2025-02-18", "last_modified_date": "2025-02-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9ce35a2d-af23-4af6-9ab2-f019cdc5a69d", "node_type": "4", "metadata": {"page_label": "9", "file_name": "note.pdf", "file_path": "/home/anjana/Project/generator/question_papers/note.pdf", "file_type": "application/pdf", "file_size": 223568, "creation_date": "2025-02-18", "last_modified_date": "2025-02-17"}, "hash": "2f05f9a81824936decd37182db7c4bcd512404ffee19f7cb72e90bc8e69fcba2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "14 Chapter 1. Functions\n1.5 Recursion\nRecursion is a process by which a function calls itself repeatedly until some speci\ufb01ed condition has\nbeen satis\ufb01ed. This process is used for repetitive computations in which each action is stated in\nterms of a previous result.\nIn order to solve a problem recursively, two conditions must be satis\ufb01ed.\n1. The problem must be written in recursive form\n2. The problem statement must include a stopping condition\nFor example to \ufb01nd the factorial of a number, the problem can be written as\nn! = n \u2217(n \u22121)!\nAlso we know that\n1! = 1\nTherefore\nn! = n \u2217(n \u22121)!\n(n \u22121)! = (n \u22121) \u2217(n \u22122)!\n(n \u22122)! = (n \u22122) \u2217(n \u22123)!\n..\n2! = 2 \u22171!\nThis method can implemented using recursion as follows\n# include < stdio .h>\nlong int factorial ( int n);\nvoid main ()\n{\nint n;\nlong int f;\nprintf (\" Enter the number :\");\nscanf (\"%d\" ,&n);\nf = factorial (n);\nprintf (\"%d! = %ld\\n\",n,f);\n}\nlong int factorial ( int n)\n{\nif(n <=1)\n{\nreturn 1;\n}\nelse\n{\n// recursive call to the function factorial\nreturn (n* factorial (n -1) );\n}\n}\nListing 1.13: Factorial of a number using recursion", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1086, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "cddf83ed-4b8d-4d4c-b4ab-9313c8d51d38": {"__data__": {"id_": "cddf83ed-4b8d-4d4c-b4ab-9313c8d51d38", "embedding": null, "metadata": {"page_label": "10", "file_name": "note.pdf", "file_path": "/home/anjana/Project/generator/question_papers/note.pdf", "file_type": "application/pdf", "file_size": 223568, "creation_date": "2025-02-18", "last_modified_date": "2025-02-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "44467bdd-07ee-454f-b5f5-c6b0b484076f", "node_type": "4", "metadata": {"page_label": "10", "file_name": "note.pdf", "file_path": "/home/anjana/Project/generator/question_papers/note.pdf", "file_type": "application/pdf", "file_size": 223568, "creation_date": "2025-02-18", "last_modified_date": "2025-02-17"}, "hash": "6f033aa9f21564fb4db7af76c2ee44542a9fb6c67a3220f0b43693d461a13db6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "1.6 Storage Classes in C 15\n1.6 Storage Classes in C\nIn C, all variables have a data type and also a storage class. Storage classes in C are:\n1. Automatic\n2. External\n3. Static\n4. Register\nThe scope of a variable determines, over what region of the program a variable is actually\navailable for use.\nThe lifetime (longevity) of a variable refers to the period during which a variable retains a\ngiven value during execution of a program.\n1.6.1 Automatic Variables\n\u2022 Automatic variable are declared inside a function in which they are to be utilized.\n\u2022 They are created when the function is called and destroyed automatically when the function\nis exited, hence the name automatic.\n\u2022 Automatic variables are therefore local to the function in which they are declared. Hence,\nautomatic variables are also referred to as local or internal variables.\n\u2022 Life time of an automatic variable will be till the function lasts.\n\u2022 Automatic variable will have some garbage value if not initialized explicitly.\n\u2022 A variable declared inside a function without storage class speci\ufb01cation is, by default, an\nautomatic variable. For example:\nint main ()\n{\nint n; /* declares n as an automatic variable */\nauto int a; /* declares a as an automatic variable */\n}\nListing 1.14: Declaration of automatic variables\n1.6.2 External Variables\n\u2022 Variables that are both alive and active thorughout the entire program are known asexternal\nvariables (global variables)\n\u2022 Unlike local variables, global variables can be accessed by any function in the program\n\u2022 Global variable will be initialized to 0 if not initialized explicitly\n\u2022 External variables are declared outside all functions. For example, external declaration of\ninteger number and \ufb02oat length might appear as\nint number ;\nfloat length = 7.5;\nmain ()\n{\n-----\n}\nfunction1 ()\n{\n-----\n}\nfunction2 ()\n{\n-----\n}\nListing 1.15: External variables declaration", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1883, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "246b9f28-7bfc-467e-a050-e3ef9cd36f7c": {"__data__": {"id_": "246b9f28-7bfc-467e-a050-e3ef9cd36f7c", "embedding": null, "metadata": {"page_label": "11", "file_name": "note.pdf", "file_path": "/home/anjana/Project/generator/question_papers/note.pdf", "file_type": "application/pdf", "file_size": 223568, "creation_date": "2025-02-18", "last_modified_date": "2025-02-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3f4c8fb9-5b7f-4c81-aa50-5297e53b3284", "node_type": "4", "metadata": {"page_label": "11", "file_name": "note.pdf", "file_path": "/home/anjana/Project/generator/question_papers/note.pdf", "file_type": "application/pdf", "file_size": 223568, "creation_date": "2025-02-18", "last_modified_date": "2025-02-17"}, "hash": "36a91e64358c070a059592380431d03c21a26f9196b338917080b7b20750328f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "16 Chapter 1. Functions\nHere, the variables number and length are available for use in all the three functions.\n\u2022 Changes made to an external variable by one function will be visible to all the functions in\nthe program.\n\u2022 In case a local variable and global variable has the same name, the local variable will have\nprecedence over the global variable in the function where it is declared. An example given\nbelow illustrates this\n# include < stdio .h>\n// Declaration Global variable x\nint x =10;\nvoid sampleFun ();\nint main ()\n{\nx ++;\n/* Prints the value of global variable x = 11 */\nprintf (\" Value of x in main = %d\\n\",x);\nsampleFun ();\n}\nvoid sampleFun ()\n{\n// Declaration local variable x\nint x =20;\nx ++;\n/* Local variable x gets precedence over global variable x */\n/* Prints the value of x as 21 */\nprintf (\" Value of x in sampleFun = %d\\n\",x);\n}\nListing 1.16: Example for external and local variables with same name\nExternal Declaration\nIf an external variable is declared after a function, then the variable must be declared inside\nthe function using the storage class speci\ufb01er extern. For example:\nvoid fun1 ();\nint main ()\n{\nextern int i; /* External Declaration */\n------\n------\n}\nvoid fun1 ()\n{\nextern int i; /* External Declaration */\n------\n------\n}\nint i;\nListing 1.17: Declaration of external variable with extern keyword\n1.6.3 Static Variables\n\u2022 Static variables persists until the end of the program\n\u2022 A variable can be declared static by using the keyword static\n\u2022 A static variable may be either an internal or external type depending upon the place of\ndeclaration\n\u2022 Internal static variable are declared inside a function. Internal static variables are similar to\nautomatic variables, except that they remain in existence throughout the remainder of the", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1774, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "df9fb545-afb6-411e-8ea5-be4fbf5db7fb": {"__data__": {"id_": "df9fb545-afb6-411e-8ea5-be4fbf5db7fb", "embedding": null, "metadata": {"page_label": "12", "file_name": "note.pdf", "file_path": "/home/anjana/Project/generator/question_papers/note.pdf", "file_type": "application/pdf", "file_size": 223568, "creation_date": "2025-02-18", "last_modified_date": "2025-02-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f7154d26-7fc4-47f5-afe5-3c8a33890c1b", "node_type": "4", "metadata": {"page_label": "12", "file_name": "note.pdf", "file_path": "/home/anjana/Project/generator/question_papers/note.pdf", "file_type": "application/pdf", "file_size": 223568, "creation_date": "2025-02-18", "last_modified_date": "2025-02-17"}, "hash": "c50348ff2a63ba7ff723b9b0157a79fc283803813fd0e18b37e4d62f1bb017c0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "1.6 Storage Classes in C 17\nprogram. Therefore internal static variables can be used to retain values between function\ncalls.\n\u2022 A static variable is initialized only once, when the program is compiled\n\u2022 An external static variable is declared outside all the functions and is available to all the\nfunctions in that program. The difference between static external variable and simple external\nvariable is that the static external variable is available only within the \ufb01le where it is de\ufb01ned\nwhile the simple external variable can be accessed by other \ufb01le.\n\u2022 Static variable will be initialized to 0 if not initialized explicitly.\n\u2022 An example differentiating static and automatic variable is given below.\nvoid display ();\nvoid main ()\n{\ndipslay ();\ndisplay ();\n}\nvoid display ()\n{\nint i = 0;\ni ++;\nprintf (\"\\n%d\",i);\n}\n/* Prints output as\n1\n1\n*/\nListing 1.18: Automatic variable i\nvoid display ();\nvoid main ()\n{\ndipslay ();\ndisplay ();\n}\nvoid display ()\n{\nstatic int i = 0;\ni ++;\nprintf (\"\\n%d\",i);\n}\n/* Prints output as\n1\n2\n*/\nListing 1.19: Static variable i\n1.6.4 Register Variables\n\u2022 We can tell the compiler that a variable should be kept in one of the machine\u2019s registers,\ninstead of keeping in the memory\n\u2022 Since a register access is much faster than a memory access, keeping the frequently accessed\nvariables in the register will lead to faster execution of the programs\n\u2022 Register variable will have garbage initial value. Register variables can be declared as follows\nregister int i;\nListing 1.20: Declaration of a register variable\n\u2022 Register variables are local to the function in which they are declared\n1.6.5 Summarizing Storage Classes\nAutomatic\nKeyword : auto\nInitial value : Garbage\nStorage location : RAM\nScope : Local to the block where the variable is de\ufb01ned\nLifetime : As long as the control is within the block where the variable is declared", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1862, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "17df726a-0843-4e78-a532-00b7b5871793": {"__data__": {"id_": "17df726a-0843-4e78-a532-00b7b5871793", "embedding": null, "metadata": {"page_label": "13", "file_name": "note.pdf", "file_path": "/home/anjana/Project/generator/question_papers/note.pdf", "file_type": "application/pdf", "file_size": 223568, "creation_date": "2025-02-18", "last_modified_date": "2025-02-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "754952d1-02c3-4c91-a8cf-d266a07829f4", "node_type": "4", "metadata": {"page_label": "13", "file_name": "note.pdf", "file_path": "/home/anjana/Project/generator/question_papers/note.pdf", "file_type": "application/pdf", "file_size": 223568, "creation_date": "2025-02-18", "last_modified_date": "2025-02-17"}, "hash": "3fad0cc30195b823b880fcc60605f9dd1c1f8d40dd33966fdd7b271f0314a298", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "18 Chapter 1. Functions\nExternal\nKeyword : extern\nInitial value : 0\nStorage location : RAM\nScope : Entire program\nLifetime : As long as the program is under execution\nStatic\nKeyword : static\nInitial value : 0\nStorage location : RAM\nScope : Local to the block where the variable is de\ufb01ned\nLifetime : As long as the program is under execution\nRegister\nKeyword : register\nInitial value : Garbage\nStorage location : Register\nScope : Local to the block where the variable is de\ufb01ned\nLifetime : As long as the control is within the block where the variable is declared", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 561, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"38e35499-2811-4d1e-8add-e2ea42c24f17": {"node_ids": ["8f729142-e26b-4362-bf57-da7bdd1a1341"], "metadata": {"page_label": "1", "file_name": "note.pdf", "file_path": "/home/anjana/Project/generator/question_papers/note.pdf", "file_type": "application/pdf", "file_size": 223568, "creation_date": "2025-02-18", "last_modified_date": "2025-02-17"}}, "32c56f14-8201-46d8-810f-6934866bc43e": {"node_ids": ["b835bc9f-02cf-45c9-8567-1ada9c53715a"], "metadata": {"page_label": "2", "file_name": "note.pdf", "file_path": "/home/anjana/Project/generator/question_papers/note.pdf", "file_type": "application/pdf", "file_size": 223568, "creation_date": "2025-02-18", "last_modified_date": "2025-02-17"}}, "a6bdff5a-70fa-453d-bd32-566948de0e11": {"node_ids": ["fe8918c3-0f94-4577-8d95-8bc1e52ebacc"], "metadata": {"page_label": "3", "file_name": "note.pdf", "file_path": "/home/anjana/Project/generator/question_papers/note.pdf", "file_type": "application/pdf", "file_size": 223568, "creation_date": "2025-02-18", "last_modified_date": "2025-02-17"}}, "aedab563-e618-443b-800d-e17e69a0d7b6": {"node_ids": ["e5334359-e8b7-46d3-9ca5-048205aa4500"], "metadata": {"page_label": "4", "file_name": "note.pdf", "file_path": "/home/anjana/Project/generator/question_papers/note.pdf", "file_type": "application/pdf", "file_size": 223568, "creation_date": "2025-02-18", "last_modified_date": "2025-02-17"}}, "0d9fa8fa-b7e9-4f2d-b527-d0048b5aec10": {"node_ids": ["ecddf02a-6fbf-4bca-a2f5-8909a28c805c"], "metadata": {"page_label": "5", "file_name": "note.pdf", "file_path": "/home/anjana/Project/generator/question_papers/note.pdf", "file_type": "application/pdf", "file_size": 223568, "creation_date": "2025-02-18", "last_modified_date": "2025-02-17"}}, "531945be-3a09-4f73-ab59-4db85e7ed95d": {"node_ids": ["f2c2065f-f2af-4a65-8279-92f878c07053"], "metadata": {"page_label": "6", "file_name": "note.pdf", "file_path": "/home/anjana/Project/generator/question_papers/note.pdf", "file_type": "application/pdf", "file_size": 223568, "creation_date": "2025-02-18", "last_modified_date": "2025-02-17"}}, "ac431b3e-ff15-4886-8702-70128090937d": {"node_ids": ["121815e2-29a0-4fa5-8774-f0bcdf728828"], "metadata": {"page_label": "7", "file_name": "note.pdf", "file_path": "/home/anjana/Project/generator/question_papers/note.pdf", "file_type": "application/pdf", "file_size": 223568, "creation_date": "2025-02-18", "last_modified_date": "2025-02-17"}}, "d638c597-0a06-44f4-9e71-d9e74acf2514": {"node_ids": ["a8c51df3-2a09-4f8f-bf9d-47ac897e24f9"], "metadata": {"page_label": "8", "file_name": "note.pdf", "file_path": "/home/anjana/Project/generator/question_papers/note.pdf", "file_type": "application/pdf", "file_size": 223568, "creation_date": "2025-02-18", "last_modified_date": "2025-02-17"}}, "9ce35a2d-af23-4af6-9ab2-f019cdc5a69d": {"node_ids": ["cdc093ca-bc99-4c43-9746-56bad7a53197"], "metadata": {"page_label": "9", "file_name": "note.pdf", "file_path": "/home/anjana/Project/generator/question_papers/note.pdf", "file_type": "application/pdf", "file_size": 223568, "creation_date": "2025-02-18", "last_modified_date": "2025-02-17"}}, "44467bdd-07ee-454f-b5f5-c6b0b484076f": {"node_ids": ["cddf83ed-4b8d-4d4c-b4ab-9313c8d51d38"], "metadata": {"page_label": "10", "file_name": "note.pdf", "file_path": "/home/anjana/Project/generator/question_papers/note.pdf", "file_type": "application/pdf", "file_size": 223568, "creation_date": "2025-02-18", "last_modified_date": "2025-02-17"}}, "3f4c8fb9-5b7f-4c81-aa50-5297e53b3284": {"node_ids": ["246b9f28-7bfc-467e-a050-e3ef9cd36f7c"], "metadata": {"page_label": "11", "file_name": "note.pdf", "file_path": "/home/anjana/Project/generator/question_papers/note.pdf", "file_type": "application/pdf", "file_size": 223568, "creation_date": "2025-02-18", "last_modified_date": "2025-02-17"}}, "f7154d26-7fc4-47f5-afe5-3c8a33890c1b": {"node_ids": ["df9fb545-afb6-411e-8ea5-be4fbf5db7fb"], "metadata": {"page_label": "12", "file_name": "note.pdf", "file_path": "/home/anjana/Project/generator/question_papers/note.pdf", "file_type": "application/pdf", "file_size": 223568, "creation_date": "2025-02-18", "last_modified_date": "2025-02-17"}}, "754952d1-02c3-4c91-a8cf-d266a07829f4": {"node_ids": ["17df726a-0843-4e78-a532-00b7b5871793"], "metadata": {"page_label": "13", "file_name": "note.pdf", "file_path": "/home/anjana/Project/generator/question_papers/note.pdf", "file_type": "application/pdf", "file_size": 223568, "creation_date": "2025-02-18", "last_modified_date": "2025-02-17"}}}}